///ORDER TRAVERSAL BINARY TREE

#include <stdio.h>
#include <stdlib.h>

struct node{
    int data;
    struct node *left, *right;
};

struct node* newnode(int data){
    struct node* new=(struct node*)malloc(sizeof(struct node));
    new->data=data;
    new->left=NULL;
    new->right=NULL;
}


///LEVEL ORDER CODE

void printLevelOrder(struct node* root){
    int h=height(root);
    int i;
    for(i=1;i<=h+1;i++){
        printGivenLevel(root,i);
        printf("\n");
    }
}

int max(int a,int b){
    if(a>b)return a;
    else return b;
}

int height(struct node* root){
    if(root==NULL){return -1;}
    int leftheight=height(root->left);
    int rightheight=height(root->right);
    return(max(leftheight,rightheight)+1);
}

void printGivenLevel(struct node* root,int level){
    if(root==NULL){return;}
    if(level==1){printf("%d", root->data);}
    else if(level>1){
        printGivenLevel(root->left,level-1);
        printGivenLevel(root->right,level-1);;
    }
}

///LEVEL ORDER ABOVE CODE ///END///

///PREORDER
void printpreorder(struct node* root){
    if(root==NULL){return;}
    printf("%d", root->data);
    printpreorder(root->left);
    printpreorder(root->right);
}

///INORDER
void printinorder(struct node* root){
    if(root==NULL){return;}
    printinorder(root->left);
    printf("%d", root->data);
    printinorder(root->right);
}

///POSTORDER
void printpostorder(struct node* root){
    if(root==NULL){return;}
    printpostorder(root->left);
    printpostorder(root->right);
    printf("%d", root->data);
}

int main(){
    struct node* root=NULL;
    root=newnode(1);
    root->left=newnode(2);
    root->right=newnode(3);
    root->left->left=newnode(4);
    root->left->right=newnode(5);
    root->right->left=newnode(6);
    root->right->right=newnode(7);
    printf("LEVEL ORDER\n");
    printLevelOrder(root);
    printf("\n\nPREORDER\n");
    printpreorder(root);
    printf("\n\nINORDER\n");
    printinorder(root);
    printf("\n\nPOSTORDER\n");
    printpostorder(root);
}

